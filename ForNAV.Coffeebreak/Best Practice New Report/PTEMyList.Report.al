#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings

Report 56789 "PTE My List"
{
    Caption = 'My List';
    DefaultRenderingLayout = FORNAV;

    dataset
    {
        dataitem(List; Customer)
        {
            CalcFields = "Balance (LCY)";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_List; ReportForNavWriteDataItem('List', List)) { }
            dataitem("Sales Header"; "Sales Header")
            {
                CalcFields = Amount;
                DataItemLink = "Sell-to Customer No." = FIELD("No.");
                DataItemTableView = sorting("Document Type", "No.") where("Document Type" = CONST(Order));
                RequestFilterFields = "No.";
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_SalesHeader; ReportForNavWriteDataItem('SalesHeader', "Sales Header")) { }
                trigger OnPreDataItem();
                begin
                    "Sales Header".SetView(ReportForNav.OnPreDataItemView('SalesHeader', "Sales Header"));
                end;

            }
            trigger OnPreDataItem();
            begin
                List.SetView(ReportForNav.OnPreDataItemView('List', List));
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
        }

    }
    rendering
    {
        layout(FORNAV)
        {
            Type = Custom;
            MimeType = 'FORNAV';
            LayoutFile = './Layouts/PTEMyList.docx';
        }
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin



    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
        FormatRegion: Text;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'List':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$List$CurrentKey$Text', List.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
            'SalesHeader':
                begin
                    CurrReport.Language := ReportForNav.GetLanguageID("Sales Header"."Language Code");
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
