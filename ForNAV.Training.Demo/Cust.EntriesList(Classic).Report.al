#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
Report 88005 "Cust. Entries List (Classic)"
{
    WordLayout = './Layouts/Cust.EntriesList(Classic).docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Customer; Customer)
        {
            PrintOnlyIfDetail = true;
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Customer; ReportForNavWriteDataItem('Customer', Customer)) { }
            column(CustomerFIELDCAPTION_Name; Customer.FieldCaption(Name))
            {
            }
            column(CustomerFIELDCAPTION_No; Customer.FieldCaption("No."))
            {
            }
            dataitem("Cust. Ledger Entry"; "Cust. Ledger Entry")
            {
                CalcFields = Amount;
                DataItemLink = "Customer No." = field("No.");
                column(ReportForNavId_6; 6) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CustLedgerEntry; ReportForNavWriteDataItem('CustLedgerEntry', "Cust. Ledger Entry")) { }
                column(CustLedgerEntryFIELDCAPTION_Amount; "Cust. Ledger Entry".FieldCaption(Amount))
                {
                }
                column(CustLedgerEntryFIELDCAPTION_PostingDate; "Cust. Ledger Entry".FieldCaption("Posting Date"))
                {
                }
                column(CustLedgerEntryFIELDCAPTION_EntryNo; "Cust. Ledger Entry".FieldCaption("Entry No."))
                {
                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('CustLedgerEntry', "Cust. Ledger Entry");
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Customer', Customer);
            end;
        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }
    trigger OnInitReport();
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPreReport();
    begin
        ;
        ReportsForNavPre;
    end;

    local procedure OnPreSectionCustLedgerEntry_Body6(var "Cust. Ledger Entry": Record "Cust. Ledger Entry");
    begin
        with "Cust. Ledger Entry" do begin
            ReportForNavSetShowOutput(Amount >= 0)
        end;
    end;

    local procedure OnPreSectionCustLedgerEntry_Body7(var "Cust. Ledger Entry": Record "Cust. Ledger Entry");
    begin
        with "Cust. Ledger Entry" do begin
            ReportForNavSetShowOutput(Amount < 0)
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Customer':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$Customer$CurrentKey$Text', Customer.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
            'CustLedgerEntry':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$CustLedgerEntry$CurrentKey$Text', "Cust. Ledger Entry".CurrentKey);
                    GlobalLanguage := currLanguage;
                    ReportForNavShowOutput := true;
                    OnPreSectionCustLedgerEntry_Body6("Cust. Ledger Entry");
                    jsonObject.Add('$Body6$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionCustLedgerEntry_Body7("Cust. Ledger Entry");
                    jsonObject.Add('$Body7$Pre', ReportForNavShowOutput);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
